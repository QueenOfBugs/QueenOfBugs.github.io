[{"categories":null,"content":"VimHacking Vim配置python开发环境 :EXPORT_FILE_NAME: Vim配置python开发环境\n功能:代码提示,代码补全,语法检查,snippet补全\n系统和软件版本:\n1 2 3 4 5 6 7 8  $ vim --version VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Mar 26 2021 00:21:09) Included patches: 1-2653 Compiled by Arch Linux $ uname -a Linux kamisama-20e0a013cd 5.10.30-1-MANJARO #1 SMP Wed Apr 14 08:07:27 UTC 2021 x86_64 GNU/Linux   插件管理器Vim-Plug  通过命令行直接安装  Unix:\n 这种方式可能需要代理才能使用，下载的网址貌似被墙,至少在我写这条记录的时候下载不了,墙对于gayhub的策略真是搞不懂\n 1 2  $ curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim    由于这种方式下载不了，所以官网推荐的自动安装的方法不适用\n  手动下载安装:  将命令行里的网址复制到浏览器，访问并复制网页内容，保存为plug.vim文件，放置到`.vim/autoload/`目录\n插件安装(加载) ~/.vimrc:\n1 2 3 4 5 6 7 8 9  call plug#begin('~/.vim/plugged')Plug 'prabirshrestha/vim-lsp'Plug 'mattn/vim-lsp-settings'Plug 'prabirshrestha/asyncomplete.vim'Plug 'prabirshrestha/asyncomplete-lsp.vim'Plug 'prabirshrestha/asyncomplete-ultisnips.vim'Plug 'honza/vim-snippets'Plug 'SirVer/ultisnips'call plug#end()  编辑完后保存`:w`,执行`:source %`重新加载vimrc文件,执行`:PlugInstall`下载插件\n插件配置 ~/.vimrc:(配置放在插件加载之后)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  if \u0026runtimepath =~ 'asyncomplete'\" inoremap \u003cexpr\u003e \u003cTab\u003e pumvisible() ? \"\\\u003cC-n\u003e\" : \"\\\u003cTab\u003e\"\" inoremap \u003cexpr\u003e \u003cS-Tab\u003e pumvisible() ? \"\\\u003cC-p\u003e\" : \"\\\u003cS-Tab\u003e\"\" inoremap \u003cexpr\u003e \u003ccr\u003e pumvisible() ? asyncomplete#close_popup() : \"\\\u003ccr\u003e\"inoremap \u003cexpr\u003e \u003cTab\u003e pumvisible() ? \"\\\u003cC-n\u003e\" : \"\\\u003cTab\u003e\"inoremap \u003cexpr\u003e \u003cS-Tab\u003e pumvisible() ? \"\\\u003cC-p\u003e\" : \"\\\u003cS-Tab\u003e\"inoremap \u003cexpr\u003e \u003ccr\u003e pumvisible() ? \"\\\u003cC-y\u003e\" : \"\\\u003ccr\u003e\"imap \u003cc-space\u003e \u003cPlug\u003e(asyncomplete_force_refresh)endifif \u0026runtimepath =~ 'asyncomplete-ultisnips' if has('python3')\" let g:UltiSnipsExpandTrigger=\"\u003ccr\u003e\"\" ctrl + e 触发snippet let g:UltiSnipsExpandTrigger=\"\u003cc-e\u003e\" let g:UltiSnipsJumpForwardTrigger=\"\u003cc-b\u003e\" let g:UltiSnipsJumpBackwardTrigger=\"\u003cc-z\u003e\" let g:UltiSnipsEditSplit=\"vertical\" call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({ \\ 'name': 'ultisnips', \\ 'allowlist': ['*'], \\ 'completor': function('asyncomplete#sources#ultisnips#completor'), \\ })) endifendifif \u0026runtimepath =~ 'vim-lsp'nmap gd :LspDefinition\u003ccr\u003enmap \u003cleader\u003ef :LspDocumentFormat\u003ccr\u003elet g:lsp_diagnostics_float_cursor=1let g:lsp_diagnostics_virtual_text_enabled=1endif  上面的配置就能实现类似pycharm的代码补全功能了\n插件详解:  vim-lsp:vim的language server protocol插件 vim-lsp-setting:方便配置vim-lsp的插件  上面两个插件安装完后打开一个py文件，就会提示安装语言服务器,选择yes；或者执行`:LspInstallServer pyls-all`,pyls-all可以换成其他，在`LspInstallServer`后按``就会切换可用的语言服务器\n asyncomplete:自动补全插件.  安装lsp后可以直接用lsp的补全功能，但是用的不是很方便，需要阅读文档后自己定制，没时间和耐心的就不合适了，所以使用自动补全插件\n  asyncomplete-lsp:让asyncomplete使用lsp的补全\n  vim-snippets:大量的snippet代码，不提供补全，所以需要补全引擎，例如:ultisnips\n  ultisnips:snippet的补全引擎\n  asyncomplete-ultisnips:将ultisnips的补全集成到asyncomplete\n  效果图  :smile:\n🙈\n","description":"","tags":null,"title":"test","uri":"/post/blog/"}]