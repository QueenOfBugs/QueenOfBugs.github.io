:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
:END:

#+title: 用org-mode配置所有dotfile
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* 用org-babel配置所有的dotfile

** Org-babel

   org-mode 可以执行代码块用的是org-babel的功能
   =org-babel-tangle(C-c C-v t)= 是一个macs内置的方法,用来将org文件中的代码块写入到指定的文件中,理论上可以利用这个方法配置一切基于文本文件配置的软件
   #+begin_src emacs-lisp :tangle ./delete_me.el
     (message "some text ")
   #+end_src

   #+begin_quote
   要让这个org文件能起到配置作用:
   - 头信息中配置好代码块tangle的目标文件
   - 想对其他语言的代码块也生效需要配置 =org-babel-do-load-languages=
   #+end_quote

   上面的例子里在代码块的 =:tangle= 属性中设置了目标文件的位置，如果代码块很多，总不能每一个都手动去指定吧，这里就可以用到org文件的头信息，
   =#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el=,就像这个文件的头信息一样，将 emacs-lisp代码块的 =tangle= 属性设置为一个默认值，这个属性被所有 emacs-lisp 代码块继承.
   和OB思想一样，如果代码块另外指定了目标文件的位置，那就会使用指定的，而不是头信息的默认属性.
  
** 将一个代码块的执行结果或返回值传递给另一个代码块
   eamcs默认执行的只有emacs-lisp语言的代码块,开启其他语言的代码块执行功能需要添加配置:
   #+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (dot . t)
        (shell . t)
        ;; (browser . t)
        (js . t)
        ))
     (push '("conf-unix" . conf-unix) org-src-lang-modes)
     ;; 每次执行不会询问是否执行
     (setq org-confirm-babel-evaluate nil)
     ;;(message "hello")
   #+end_src

   #+NAME: block_name
   #+begin_src python :results value 
     import random
     return random.randint(0,100)
   #+end_src
   上面的代码块有名字 =block_name=,下面载配置文件的过程就是执行一系列emacs-lisp的过程,所以有时候顺序很重要
  
** 每次保存这个文件自动执行 =org-bable-tangle=
   #+begin_src emacs-lisp
     (defun efs/org-babel-tangle-config()
       (when (string-equal (buffer-file-name)
                           (expand-file-name "~/MyLife/Emacs/DotFiles.org"))
         (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))
     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src

* Emacs

** 显示emacs启动时间
   #+begin_src emacs-lisp
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "*** Emacs loaded in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))
   #+end_src

** Native Compilation
   #+begin_src emacs-lisp
     ;; Silence compiler warnings as they can be pretty disruptive
     (setq comp-async-report-warnings-errors nil)
   #+end_src

** 包管理工具
   #+begin_quote
   这是写给我自己记录用的,免得过些时候忘了写这个配置文件时候的这些想法,看到这里记得把这写碎碎念移到介绍emacs包管理工具或其他合适的地方.
   Emacs原生状态又丑由low,完全是上世纪的文本编辑器风格.那为啥会有那么多人用?还被成为是"神之编辑器"?我的使用感受是因为它有强大的社区支持和高度可定制.
   Vim也是可定制,但vimscript给我个人的感觉是真的难用,又像是语言又像是配置文件,但emacs不同,它的配置语言emacs-lisp是lisp方言,配置emacs感觉就像是
   在自己编写适合自己的编辑器的程序一样,怪不得之前看到一篇写lisp为什么现在不是热门语言的文章说lisp是一门创造其他编程语言的编程语言.基于这种强大的可定制能力,
   Emacs的社区成员为我们提供了许多强大的配置,这些配置被整合成一个个包放在Melpa,Elpa等仓库里,类似插件形式可供用户下载使用,Emacs自带的包管理工具我只用过图形界面的,也就是点点点来安装包,
   但用点点点的形式不能每次更换环境都靠点点点吧,看了下emacswiki,里面也有emacs自带的包管理工具的配置,好不好用不知道,反正我看的一些教程里都没用.网上emacs大神用的全是可再现的配置文件,跟着大神走总没错吧,在追求性价比这方面,搞编程(懒)的人总是有特殊的想法,
   大神的配置总是要达到一次配置,多次使用的目标.
   [[https://github.com/jwiegley/use-package][use-package]]就是一位大神因为使用的包太多创建出来的一个包管理工具,尽管大神说这个是用来更好的配置他那80多个包的而不是一个包管理工具,但也是能当包管理工具使的.
   我这个配置文件是跟着[[https://github.com/daviwil][David Wilson]]的系列直播视频和他的配置文件学的,尽管他的包管理工具已经换成 [[https://github.com/raxod502/straight.el#features][straight.el]] 了, 但暂时我还是先用着 =use-package= 再说,而且看介绍, =straight.el= 是有 =use-package= 集成的,将来再换应该不难,看David的配置文件也只加了一点额外配置,其他基本没怎么变.
   上面是不正经的碎碎念,下面就是正经的配置文件
   #+end_quote

   #+begin_src emacs-lisp
     ;; 这个package 就是emacs默认的包管理工具了(吧)
     (require 'package)   ;; 这里的require 就像是python里的import吧,package就像是module

     ;; 设置包仓库
     (setq package-archives '(("malpa" . "https://melpa.org/packages/")
                              ("org" . "https://orgmode.org/elpa/")
                              ("elpa" . "https://elpa.gnu.org/packages/")))

     ;; 设置完仓库后要初始化一下仓库,再去执行下载包或者其他动作,使用过linux包管理工具的应该不陌生
     (package-initialize)
     (unless package-archive-contents   ;;如果源头仓库的信息没有缓存到本地就执行package-refresh-contents缓存一下,相当与apt update吧
       (package-refresh-contents))
     ;; Initialize use-package on non-Linux platforms,这是在非linux平台上,可能use-package不是emacs内置的包,那就需要先下载才能使用
     (unless (package-installed-p 'use-package) ;;检测一下use-package是否安装了,没装就装一下呗
       (package-install 'use-package))

     ;; 到这里就可以开始使用 use-package 了
     (require 'use-package)
     ;; 默认加载每一个use-package管理的包,等于是每一个use-package里加上:ensure
     (setq use-package-always-ensure t)
   #+end_src
   
** 默认编码格式
   避免windows上可能会出现的编码错误
   #+begin_src emacs-lisp
     (set-default-coding-systems 'utf-8)
   #+end_src
** Server Mode
   #+begin_src emacs-lisp :tangle no
     (server-start)
   #+end_src
** 查看启动过程耗时
   #+begin_src emacs-lisp
     (use-package benchmark-init
       :ensure t
       :config
       ;; To disable collection of benchmark data after init is done.
       (add-hook 'after-init-hook 'benchmark-init/deactivate))
   #+end_src

** 基本的设置
*** 取消初始界面的菜单,工具栏,滚动条等 
    #+begin_src emacs-lisp
      (setq inhibit-startup-message t)
      (scroll-bar-mode 0)              ;Disable visible scrollbar
      (tool-bar-mode 0)                ;Disable the toolbar
      (tooltip-mode 0)                 ;Disable tooltips
      (set-fringe-mode 10)             ;Give some breathing room
      (menu-bar-mode 0)                ;Disale the menu bar
      ;;set up the visible bell
      (setq visible-bell t)
    #+end_src
    
*** 优化滚动的表现

    #+begin_src emacs-lisp
      (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
      (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
      (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
      (setq scroll-step 1) ;; keyboard scroll one line at a time
      (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
    #+end_src

*** 窗口透明度和最大化
    #+begin_src emacs-lisp
      (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
      (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
      (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
    #+end_src

*** 字体设置

    #+begin_src emacs-lisp
      ;; 'han 的脚本类型对应CJK三种语言的字符 'latin 对应英文字符
      ;; (set-fontset-font "fontset-default" 'han "Xiaolai Mono SC")

      (set-fontset-font "fontset-default" 'han "AR PL UKai CN")
      ;; Ubuntu Mono 字体能很好的和中文1:2等宽,:font 属性的使用和.Xresource 里字体的使用方式一样,只不过不能指定多个字体
      (set-face-attribute 'default nil :font "Ubuntu Mono:pixelsize=20")
    #+end_src
    
*** 状态栏设置
**** Basic Customization

     #+begin_src emacs-lisp
       (setq display-time-format "%H:%M %p %Y-%m-%d %j"
             dispaly-time-default-load-average nil)
       ;;(setq display-time-format "%l:%M %p %b %y"
       ;;       dispaly-time-default-load-average nil)
     #+end_src

**** Enable mode Diminishing
     The diminish package hides pesky minor modes from the modelines.
     #+begin_src emacs-lisp
       (use-package diminish)
     #+end_src

**** Smart mode line
     #+begin_src emacs-lisp :tangle no
       (use-package smart-mode-line
         :disabled
         :if dw/is-termux
         :config
         (setq sml/no-confirm-load-theme t)
         (sml/setup)
         (sml/apply-theme 'respectful)  ; Respect the theme colors
         (setq sml/mode-width 'right
               sml/name-width 60)

         (setq-default mode-line-format
                       `("%e"
                         ,(when dw/exwm-enabled
                            '(:eval (format "[%d] " exwm-workspace-current-index)))
                         mode-line-front-space
                         evil-mode-line-tag
                         mode-line-mule-info
                         mode-line-client
                         mode-line-modified
                         mode-line-remote
                         mode-line-frame-identification
                         mode-line-buffer-identification
                         sml/pos-id-separator
                         (vc-mode vc-mode)
                         " "
                                               ;mode-line-position
                         sml/pre-modes-separator
                         mode-line-modes
                         " "
                         mode-line-misc-info))
         (setq rm-excluded-modes
               (mapconcat
                'identity
                                               ; These names must start with a space!
                '(" GitGutter" " MRev" " company"
                  " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
                  " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
                "\\|")))
     #+end_src
**** Doom modeline
     #+begin_src emacs-lisp
       (use-package minions           ; 隐藏当前启用了哪些minor mode
         :hook (doom-modeline-mode . minions-mode))

       (use-package all-the-icons)    ; modeline 正常展示需要许多图标字体支持,字体需要从github下载安装

       (use-package doom-modeline

         :init
         (doom-modeline-mode 1)
         ;;:after eshell                ; 确保启动eshell后启动doom-modeline,尽管manjaro-i3上正使用的emacs不存在这个问题
         :custom-face
         (mode-line ((t (:height 0.85))))
         (mode-line-inactive ((t (:height 0.85))))
         :custom
         (doom-modeline-height 15)
         (doom-modeline-bar-width 6)
         (doom-modeline-lsp t)
         (doom-modeline-github nil)
         (doom-modeline-mu4e nil)
         (doom-modeline-irc nil)
         (doom-modeline-minor-modes t)
         (doom-modeline-persp-name nil)
         (doom-modeline-buffer-file-name-style 'truncate-except-project)
         (doom-modeline-major-mode-icon nil)
         )
     #+end_src

*** 更好的括号展示
    
    #+begin_src emacs-lisp
      ;; 按不同颜色显示成对括号
      (use-package rainbow-delimiters
        :hook (prog-mode . rainbow-delimiters-mode))
      ;;高亮当前光标下的括号对应的括号
      (use-package paren
        :config
        (set-face-attribute 'show-paren-match-expression nil :background "#FFFFFF")
        (show-paren-mode 1))

    #+end_src

*** doom主题

    #+begin_src emacs-lisp
      (use-package doom-themes
        :init
        (load-theme 'doom-palenight t)
        :config
        (doom-themes-visual-bell-config))
    #+end_src
    
*** 行号设置
    
    #+begin_src emacs-lisp

      (column-number-mode)
      ;; Disable line numbers for some modes
      (dolist (mode '(term-mode-hook
                      shell-mode-hook
                      eshell-mode-hook
                      markdown-mode-hook
                      org-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))

      (dolist (mode '(text-mode-hook
                      prog-mode-hook
                      conf-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 1))))

    #+end_src
    
*** Workspace
    #+begin_src emacs-lisp
      (use-package perspective
        :demand t
        :bind (("C-M-k" . persp-switch)
               ("C-M-n" . persp-next)
               ("C-x k" . persp-kill-buffer*))
        :custom
        (persp-initial-frame-name "Main")
        :config
        ;; Running `persp-mode' multiple times resets the perspective list...
        (unless (equal persp-mode t)
          (persp-mode)))
    #+end_src
*** NOtifications
    #+begin_src emacs-lisp
      (use-package alert
        :commands alert
        :config
        (setq alert-default-style 'notifications))
    #+end_src
*** Auto-Saving changed files
    #+begin_src emacs-lisp
      (use-package super-save
        :defer 1
        :diminish super-save-mode
        :config
        (super-save-mode +1)
        (setq super-save-auto-save-when-idle t) )
    #+end_src
*** Auto-Reverting Changed Files
    #+begin_src emacs-lisp
      (setq global-auto-revert-non-file-buffers t)
      (global-auto-revert-mode 1)
    #+end_src
*** UI Toggles
    #+begin_src emacs-lisp
    #+end_src
** 按键设置

*** 查看使用了哪些命令
    #+begin_src emacs-lisp
      (use-package command-log-mode)
    #+end_src
   
*** 取消ESC作为 =M-x= 的前缀按键,将其设置为和Vim类似的退出命令 =C-g=
    #+begin_src emacs-lisp
      ;; Make ESC quit prompts
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    #+end_src

*** 取消 =C-u= 作为 =[count]= 的作用,因为要使用Vim的 =C-u= 做翻页

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-M-u") 'universal-argument)
    #+end_src


*** Evil

**** 基本的Vim按键设置
     #+begin_src emacs-lisp
       (use-package undo-tree
         :init
         (global-undo-tree-mode 1))

       (use-package evil
         :init
         (setq evil-want-integration t)
         (setq evil-want-keybinding nil)
         (setq evil-want-C-u-scroll t)
         (setq evil-want-C-i-jump nil)
         (setq evil-undo-system 'undo-tree)

         :config
         (evil-mode 1)
         (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
         (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

         ;; Use visual line motions even outside of visual-line-mode buffers
         ;;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
         ;;(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

         (evil-set-initial-state 'messages-buffer-mode 'normal)
         (evil-set-initial-state 'dashboard-mode 'normal)
         ;;(evil-set-initial-state 'treemacs-mode 'evil-normal-state)
         )

       (use-package evil-collection
         :after evil
         :config
         (evil-collection-init))

     #+end_src


**** 绑定"jk"退出插入模式

     #+begin_src emacs-lisp

       (use-package evil-escape
         :config
         (evil-escape-mode 1)
         (setq-default evil-escape-key-sequence "jk")
         (setq-default evil-escape-delay 0.5))

     #+end_src


**** 绑定<leader>s重新加载配置文件
     #+begin_src emacs-lisp
       ;; (evil-set-leader 'normal (kbd "SPC"))
       ;; This buffer is for text that is not saved, and for Lisp evaluation.
       ;; To create a file, visit it with <open> and enter text in its buffer.

       (defun reload-init-file ()
         (interactive)
         (load-file "~/.emacs.d/init.el")
         )
       (evil-define-key 'normal 'global (kbd "<leader>s") 'reload-init-file)

     #+end_src
** 编辑设置
*** Tab Width
    #+begin_src emacs-lisp
      (setq-default tab-width 2)
      (setq-default evil-shift-width tab-width)
    #+end_src
*** Use spaces instead of tabs for indnetation
    #+begin_src emacs-lisp
      (setq-default indent-tabs-mode nil)
    #+end_src
*** Commenting Lines
    #+begin_src emacs-lisp
      (use-package evil-nerd-commenter
        :bind ("M-c" . evilnc-comment-or-uncomment-lines))
    #+end_src
*** Automatically Clean whitespace
    #+begin_src emacs-lisp
      (use-package ws-butler
        :hook ((text-mode . ws-butler-mode)
               (prog-mode . ws-butler-mode)))

    #+end_src

** 按键面板
   [[https://github.com/justbur/emacs-which-key][which-key]] 根据当前按下的按键展示可用(能)的快捷键组合和对应命令
   #+begin_src emacs-lisp

     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3)) ;设置多少延迟后调用which-key

   #+end_src

** 按键绑定
   
*** [[https://github.com/noctuid/general.el][general.el]] 用来管理快捷键绑定

    #+begin_src emacs-lisp :tangle no
      (use-package general
        :config
        (general-evil-setup t)
        (general-create-definer rune/leader-keys
                                :keymaps '(normal insert visual emacs)
                                :prefix "SPC"
                                :global-prefix "C-SPC")

        (rune/leader-keys
         "t"  '(:ignore t :which-key "toggles")
         "tt" '(counsel-load-theme :which-key "choose theme")
         "f"  '(:ignore t :which-key "file")
         "ft" '(treemacs :which-key "file tree")))

    #+end_src

*** hydra 来绑定快捷键
    
    #+begin_src emacs-lisp :tangle no
      (use-package general
        :config
        (general-create-definer rune/leader-keys
                                :keymaps '(normal insert visual emacs)
                                :prefix "SPC"
                                :global-prefix "C-SPC"))


      (defhydra hydra-files ()
        ;;(interactive)
        ;;("f" treemacs "file tree")

        ("t" treemacs :which-key "file tre")
        ("l" text-scale-increase "out"))
      (defhydra hydra-leader ()
        ("f" hydra-files/body "files" :exit t))

      (rune/leader-keys
       "f" '(hydra-files/body :which-key "files")
       )

      ;;(global-set-key (kbd "SPC") 'hydra-leader/body)
      ;;     (define-key evil-normal-state-map (kbd "SPC") 'hydra-leader/body)
      (defhydra hydra-zoom ()
        "zoom"
        ("g" text-scale-increase "in")
        ("l" text-scale-decrease "out"))

      (global-set-key (kbd "C-c") 'hydra-zoom/body)

    #+end_src

*** Evil 快捷键绑定
    #+begin_src emacs-lisp


      ;;(add-hook 'special-mode-hook 'evil-normal-state)
      (define-key evil-normal-state-map (kbd "<SPC>ft") '("File tree" . treemacs))
      (which-key-add-key-based-replacements
        "<SPC>f" "Files")
      ;;(define-key evil-normal-state-map (kbd "<SPC>ft")'("File tree" . treemacs))
    #+end_src

** 文件浏览器
   #+begin_src emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t)
     (use-package treemacs-evil
       :after (treemacs evil)
       :ensure t)
   #+end_src
   
** Minibuffer补全(Emacs 命令补全)
   Emacs有两种类型的补全，一种是写代码或文本时的补全(text completion),另一种就是使用emacs 命令时的补全(Minibuffer completion).
   [[https://github.com/kenmcmil/ivy][Ivy]] 是一个使用minibuffer的补全机制,提供针对emacs命令的各种补全功能,[[https://github.com/abo-abo/swiper][swpier]] 是基于Ivy的更好用的 =Isearch= 工具, [[https://github.com/abo-abo/swiper#counsel][counsel]] 是基于Ivy的 =execute-extended-command= (M-x) 增强版本,用正则更方便的选择emacs命令

   #+begin_src emacs-lisp
     (use-package ivy
       :diminish
       :bind (("C-s" . swiper)
              :map ivy-minibuffer-map
              ("TAB" . ivy-alt-done)
              ("C-l" . ivy-alt-done)
              ("C-j" . ivy-next-line)
              ("C-k" . ivy-previous-line)
              :map ivy-switch-buffer-map
              ("C-k" . ivy-previous-line)
              ("C-l" . ivy-done)
              ("C-d" . ivy-switch-buffer-kill)
              :map ivy-reverse-i-search-map
              ("C-k" . ivy-previous-line)
              ("C-d" . ivy-reverse-i-search-kill))
       :config
       (ivy-mode 1))

     (use-package ivy-rich
       :init
       (ivy-rich-mode 1))

     (use-package counsel
       :bind (("M-x" . counsel-M-x)
              ("C-x b" . counsel-ibuffer)
              ("C-x C-f" . counsel-find-file)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history)))
   #+end_src

** Development
*** Lsp-mode
**** Lsp
    
     #+begin_src emacs-lisp


       (use-package lsp-mode
         :init
         ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
         (setq lsp-keymap-prefix "C-c l")
         :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
                (python-mode . lsp)
                (json-mode .lsp)
                (html-mode .lsp)
                ;; if you want which-key integration
                (lsp-mode . lsp-enable-which-key-integration))
         :commands lsp lsp-deferred)

       ;; optionally

       ;; company provide completion function
       (use-package company)

       (use-package flycheck
         ;; :init (global-flycheck-mode)
         )

       (use-package lsp-ui :commands lsp-ui-mode)
       ;; if you are helm user
       ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
       ;; if you are ivy user
       (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
       (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

       ;; optionally if you want to use debugger
       ;; (use-package dap-mode
         ;; :defer)

       ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
       ;; (require 'dap-python)

       ;; optional if you want which-key integration
       ;;(use-package which-key
       ;;:config
       ;;(which-key-mode))

     #+end_src

     #+begin_src emacs-lisp :tangle no
       (use-package lsp-mode
         :init
         ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
         (setq lsp-keymap-prefix "C-c l")
         :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
                (python-mode . lsp-defer)
                ;; if you want which-key integration
                (lsp-mode . lsp-enable-which-key-integration))
         :commands lsp)

       ;; optionally
       (use-package lsp-ui :commands lsp-ui-mode)
       ;; if you are helm user
       ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
       ;; if you are ivy user
       (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
       (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

       ;; optionally if you want to use debugger
       (use-package dap-mode)
       ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

       ;; optional if you want which-key integration
       ;;(use-package which-key
       ;;:config
       ;;(which-key-mode))
     #+end_src
    
**** Lsp for python
     

***** Pylsp
      #+begin_src emacs-lisp :tangle no
        (setq lsp-pylsp-plugins-yapf-enabled t)
        (setq lsp-pylsp-plugins-jedi-use-pyenv-environment t)
      #+end_src
***** Pyright

      #+begin_src emacs-lisp :tangle no
        (use-package lsp-pyright
          :ensure t
          :hook (python-mode . (lambda ()
                                 (require 'lsp-pyright)
                                 (lsp))))  ; or lsp-deferred
        ;; (use-package company)
      #+end_src
***** Mspyls
      #+begin_src emacs-lisp :tangle no
        (use-package lsp-python-ms
          :ensure t
          :init (setq lsp-python-ms-auto-install-server t)
          :hook (python-mode . (lambda ()
                                 (require 'lsp-python-ms)
                                 (lsp))))  ;lsp or lsp-deferred

      #+end_src
***** jedi
      #+begin_src emacs-lisp :tangle no
        (use-package lsp-jedi
          :ensure t
          :config
          (with-eval-after-load "lsp-mode"
            (add-to-list 'lsp-disabled-clients 'pyls)
            (add-to-list 'lsp-disabled-clients 'mspyls)
            (add-to-list 'lsp-disabled-clients 'pylsp)
            ;; (add-to-list 'lsp-enabled-clients 'jedi)
            ))
      #+end_src

**** LSP for Html
     #+begin_src emacs-lisp

     #+end_src

*** Python_settings
    #+begin_src emacs-lisp
      ;; 设置缩进为4
      (setq
       python-indent-offset 4
       python-indent-guess-indent-offset nil)
      (add-hook 'python-mode-hook (electric-pair-mode 1))
    #+end_src

*** Format python code
    #+begin_src emacs-lisp
      (use-package yapfify
        :config
        (add-hook 'python-mode-hook 'yapf-mode))
    #+end_src

*** Format All
    #+begin_src emacs-lisp
      (use-package format-all)
    #+end_src
*** Elpy -- IDE for py
    #+begin_src emacs-lisp :tangle no
      (use-package elpy
        :ensure t
        :init
        (elpy-enable))
    #+end_src

** Orgmode

   
*** CodeBlock模版
    #+begin_src emacs-lisp
      (require 'org-tempo)
      (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("ipy" . "src ipython :session"))
      (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
      #+end_src

*** outline
    配置headline的项目符号(bullet point)
    #+begin_src emacs-lisp 
      (use-package org-superstar
        :after org
        :hook (org-mode . org-superstar-mode)
        :config
        (setq org-superstar-leading-bullet  ?\s)

        :custom
        ;;(org-superstar-remove-leading-stars t)

        (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
        ;; (org-superstar-headline-bullets-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
        )


    #+end_src

    配置折叠后的省略号
    #+begin_src emacs-lisp 
      (setq org-ellipsis " ▼ ")
    #+end_src
    
*** Org-roam
    #+begin_src emacs-lisp
            ;;(use-package org-roam
              ;;:ensure t
              ;;:init
              ;;(setq org-roam-v2-ack t)
              ;;:custom
              ;;(org-roam-directory "~/MyLife/org-roam")
              ;;:bind (("C-c n l" . org-roam-buffer-toggle)
                     ;;("C-c n f" . org-roam-node-find)
                     ;;("C-c n i" . org-roam-node-insert))
              ;;:config
              ;;(org-roam-setup))
      (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory "~/MyLife/org-roam")
        (org-roam-completion-everywhere t)
        (org-roam-dailies-capture-templates
          '(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n i" . org-roam-node-insert)
               :map org-mode-map
               ("C-M-i" . completion-at-point)
               :map org-roam-dailies-map
               ("Y" . org-roam-dailies-capture-yesterday)
               ("T" . org-roam-dailies-capture-tomorrow))
        :bind-keymap
        ("C-c n d" . org-roam-dailies-map)
        :config
        (require 'org-roam-dailies) ;; Ensure the keymap is available
        (org-roam-db-autosync-mode))

    #+end_src
*** Org-mode

**** Init set up

    #+begin_src emacs-lisp
      (setq org-directory "~/MyLife/org")
      (global-set-key (kbd "C-c l") 'org-store-link)
      (global-set-key (kbd "C-c a") 'org-agenda)
      (global-set-key (kbd "C-c c") 'org-capture)
    #+end_src
    
**** Hide emphasis markers

     #+begin_src emacs-lisp
       (setq org-hide-emphasis-markers t)
     #+end_src

**** org-drill
     #+begin_src emacs-lisp
       (use-package org-drill)
     #+end_src

*** Pomodoro
    #+begin_src emacs-lisp :tangle no
      (use-package org-pomodoro
        :config
        (setq org-pomodoro-start-sound (expand-file-name "~/MyLife/Emacs/sounds/meditation_bell.wav"))
        (setq org-pomodoro-short-break-sound (expand-file-name "~/MyLife/Emacs/sounds/meditation_bell.wav"))
        (setq org-pomodoro-long-break-sound (expand-file-name "~/MyLife/Emacs/sounds/meditation_bell.wav"))
        (setq org-pomodoro-finished-sound (expand-file-name "~/MyLife/Emacs/sounds/meditation_bell.wav")))
      ;; org-pomodoro use sound-wav pavkage to play the sound
      (use-package sound-wav)

    #+end_src

*** tracking habits
    #+begin_src emacs-lisp
      (add-to-list 'org-modules 'org-habit)
    #+end_src

*** Auto insert newline
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
      (add-hook 'org-mode-hook 'auto-fill-mode)
    #+end_src

*** org-capture-template
    #+begin_src emacs-lisp
      (setq org-capture-templates
      '(
        ("t" "Tasks")
        ("tt" "TODO" entry (file+headline "GTD.org" "Tasks") "* TODO %?\n %i\n %a")
        ("T" "Thoughts")
        ("TT" "Thought  To be done" entry (file+headline "GTD.org" "未实现的想法") "* %?\n" :jump-to-captured t)
        ("d" "Drills")
        ("dE" "Drills for English" entry (file+headline "GTD.org" "English")  "* %? :drill:")
        ("dP" "Drills for Python" entry (file+headline "~/MyLife/Python/Learning_Python/README.org" "练习题") "* %? :drill:\n** Answer\n** Note\n" :jump-to-captured t)
        )
      )
    #+end_src

*** Encrypt
    #+begin_src emacs-lisp
      (require 'org-crypt)
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))
      ;; GPG key to use for encryption
      ;; Either the Key ID or set to nil to use symmetric encryption.
      (setq org-crypt-key "kamisama")
    #+end_src



** Productivity
   一些能提高编辑效率的配置
   
*** 括号补全
    自动补全各种括号和引号
    #+begin_src emacs-lisp

      ;;(electric-pair-mode 1)

      (use-package smartparens
        :hook
        (prog-mode . smartparens-mode)
        (org-mode . smartparens-mode ))
    #+end_src
    
*** Snippet
    #+begin_src emacs-lisp
      ;; snippet engine
      (use-package yasnippet
        :defer
        :hook (prog-mode . yas-minor-mode)
        :config
        (yas-reload-all))
      ;; snippets
      ;; (use-package yasnippet-snippets
        ;; :hook (prog-mode .))
    #+end_src

** Ebook
   #+begin_src emacs-lisp :tangle no
     (use-package nov
       :config
       (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

   #+end_src

** Magit
   #+begin_src emacs-lisp
     ;; (use-package magit)
   #+end_src

** Save Emacs Sessions
   #+begin_src emacs-lisp
     (desktop-save-mode 1)
   #+end_src
